# Generated by Django 3.0.4 on 2020-04-05 04:00

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='EnumCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.CharField(blank=True, default='', max_length=256)),
                ('name', models.CharField(max_length=64)),
                ('category', models.CharField(choices=[('CAT', 'Category'), ('COM', 'Company'), ('CAR', 'Card'), ('NUL', 'NULL')], default='NUL', max_length=3)),
            ],
            options={
                'ordering': ['category'],
            },
        ),
        migrations.CreateModel(
            name='MonthlyBudget',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('budget', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='RecurringBill',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('frequency', models.CharField(choices=[('Y', 'Year'), ('M', 'Month')], default='M', max_length=1)),
                ('recurring_month', models.IntegerField(default=1)),
                ('recurring_day', models.IntegerField()),
                ('amount', models.FloatField(default=0)),
                ('note', models.CharField(blank=True, default='', max_length=512)),
                ('time_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('card', models.ForeignKey(blank=True, limit_choices_to={'category': 'CAR'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recur_card', to='bill.EnumCategory')),
                ('category', models.ForeignKey(blank=True, limit_choices_to={'category': 'CAT'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recur_category', to='bill.EnumCategory')),
                ('company', models.ForeignKey(blank=True, limit_choices_to={'category': 'COM'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recur_company', to='bill.EnumCategory')),
            ],
            options={
                'ordering': ['frequency', 'recurring_month', 'recurring_day', 'time_created'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.FloatField(default=0)),
                ('note', models.CharField(blank=True, default='', max_length=512)),
                ('time_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('card', models.ForeignKey(blank=True, limit_choices_to={'category': 'CAR'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bill_card', to='bill.EnumCategory')),
                ('category', models.ForeignKey(blank=True, limit_choices_to={'category': 'CAT'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bill_category', to='bill.EnumCategory')),
                ('company', models.ForeignKey(blank=True, limit_choices_to={'category': 'COM'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bill_company', to='bill.EnumCategory')),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='bill_instance', to='bill.RecurringBill')),
            ],
            options={
                'ordering': ['-time_created'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
